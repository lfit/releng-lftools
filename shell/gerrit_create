#!/bin/bash -l
# SPDX-License-Identifier: EPL-1.0
##############################################################################
# Copyright (c) 2016, 2017 The Linux Foundation and others.
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
##############################################################################
set -o errexit
TMP_WORKSPACE="${OPTARG:-/tmp/}"

sanity_checks () {
echo gerrit url="$project"
echo new repo name="$repository"
echo "Gerrit Create Project:"
echo "ssh -p 29418 $user@$project gerrit create-project $repository --empty-commit --parent All-Projects"

if [[ -z "$repository" ]]; then
  echo "repository name not defined"
  exit 1
fi

if [[ $(ssh -p 29418 "$user"@"$project" gerrit version) ]];
then
  echo "can connect to gerrit"
else
  echo "cannot connect to gerrit"
  exit 1
fi

#Exit if project already exists
set -e errexit
# shellcheck disable=SC2029
ssh -p 29418 "$user"@"$project" gerrit set-project "$repository"  &> /dev/null && \
echo "$repository Already exists, cannot create exiting" && exit 1
set +e errexit

}

movetoworkspace () {
if ! [[ -d "$TMP_WORKSPACE" ]]; then
  echo "$TMP_WORKSPACE"
  mkdir -p "$TMP_WORKSPACE"
else
  echo "$TMP_WORKSPACE already exists exiting"
  exit 1
fi
cd "$TMP_WORKSPACE"
}

create_repo () {
echo "Creating repository $repository"
# shellcheck disable=SC2029
ssh -p 29418 "$user"@"$project" "gerrit create-project $repository --empty-commit --parent All-Projects"
}

clone_repo() {
movetoworkspace
if ! [[ -d "$repository" ]];
then
  git clone ssh://"$user"@"$project":29418/"$repository" "$repository" &> /dev/null
  cd "$repository"
  git fetch origin refs/meta/config &> /dev/null && git checkout FETCH_HEAD &> /dev/null
fi

}

create_groups_file () {
cd "$TMP_WORKSPACE"/"$repository" || exit
#get uuid for for GitHub users into groups file
ssh -p 29418 "$user"@"$project" gerrit ls-groups --verbose \
  | grep "GitHub\ Replication"\
  | awk '{print $3"\t"$1,$2}' > groups.tmp

printf "global:Registered-Users\tRegistered Users\n\
ldap:cn=%s,ou=Groups,dc=freestandards,dc=org\tldap/%s\n" "$ldapgroup" "$ldapgroup"\
>> groups.tmp


printf "Hello, %s\n" "$NAME"

echo "groups file:"
echo ""
cat groups.tmp

if diff groups groups.tmp; then
  echo groups file already configured not pushing
  rm groups.tmp
else
  mv groups.tmp groups
  git add groups
  git commit -sv -m "Creating groups file"  &> /dev/null

  if git push origin HEAD:refs/meta/config &> /dev/null; then
    echo "git push for groups file succeeded"
  else
    echo "git push for groups file failed"
    exit 1
  fi
fi

}

create_repository_config () {
cd "$TMP_WORKSPACE"/"$repository" || exit

git config  --replace project.config 'access.inheritFrom' "All-Projects"
git config  --replace -f project.config 'access.refs/*.read' "deny group GitHub Replication"
git config  --replace -f project.config 'access.refs/*.owner' "group ldap/$ldapgroup"

echo "project.config:"
echo ""
cat project.config

git add project.config
git commit -sv -m "Pushing $repository project.config to refs/meta/config"

if git push origin HEAD:refs/meta/config &> /dev/null; then
  echo "git push for $repository refs meta config succeeded"
else
  echo "git push for $repository refs meta config failed"
  exit 1
fi

}

usage() {
cat << EOF
"$0": Creates a repository and sets up the permissions.

usage: $0 [OPTIONS]
 -h  Show this message
 -p  project url eg: gerrit.localhost
 -d  ldap group
 -r  repository name
 -u  ssh user name
 -w  workspace to do clones etc. (must not be in a git repo)
     Default is /tmp/

example: $0  -p gerrit.localhost -d project-gerrit-group-committers -r reponame -u lfid

EOF

exit 1

}

# shellcheck disable=SC2199
if [[ -z "$@" ]]; then usage
fi

while getopts "p:d:r:u:w:h" OPTION
do
        case $OPTION in
                p ) project="$OPTARG" ;;
                d ) ldapgroup="$OPTARG" ;;
                r ) repository="$OPTARG" ;;
                u ) user="$OPTARG" ;;
                w ) TMP_WORKSPACE="$OPTARG" ;;
                h ) usage; exit;;
                \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        esac
done

sanity_checks "$@"
create_repo "$@"
clone_repo "$@"
create_groups_file "$@"
create_repository_config "$@"

echo "Repo Created and Configured"
echo gerrit="$project"
echo ldapgroup="$ldapgroup"
echo repository="$repository"
